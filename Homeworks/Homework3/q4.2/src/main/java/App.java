/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class App {
    /**
     * In the main method a SimpleIcon which will be used in program to control its color. Then there will be 3 buttons
     * dynamically generated which will have Color names as their text. Each button will have an Action Listener which
     * when click will change the SimpleIcon to the color corresponding to the button text.
     * @param args None used
     */
    public static void main(String[] args) {

        final SimpleIcon simpleIcon = new SimpleIcon(150, 150);
        final JFrame frame = new JFrame();

        //With JAva 11 the following line did not work. So I broke it up using colorStrings and Colors
        //Color[] colors = new String[]{"RED", "GREEN", "BLUE"};
        final String[] colorStrings = {"GREEN", "BLUE", "RED"};
        final Color[] colors = {Color.GREEN, Color.BLUE, Color.RED};
        JButton[] btn = new JButton[3];

        frame.setLayout(new FlowLayout());
        for (int i = 0; i < colorStrings.length; i++) {
            btn[i] = createButton(i, colorStrings, colors, simpleIcon, frame);
            frame.add(btn[i]);
        }

        JLabel label = new JLabel(simpleIcon);
        frame.add(label);
        frame.pack();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
        frame.setSize(200, 300);

    }
    /**
     * The function will generate a button that will have an Action listener which when clicked
     * will change the color of the simple Icon.
     * @param i Index used to look up the color String an color
     * @param colorStrings List of string color names
     * @param colors List of colors used to update the simpleIcon
     * @param simpleIcon Controlled icon based on the action listener.
     * @param frame JFrame where the simpleIcon lives and buttons live
     * @return
     */
    private static JButton createButton(int i, String[] colorStrings, Color[] colors, SimpleIcon simpleIcon, JFrame frame){
        JButton helloButton = new JButton(colorStrings[i]);
        final int index = i;
        helloButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                simpleIcon.setColor(colors[index]);
                frame.repaint();
            }
        });
        return helloButton;
    }
}
